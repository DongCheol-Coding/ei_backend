name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🚚 Checkout source
        uses: actions/checkout@v3

      - name: ☕ Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 💾 Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🔨 Build with Gradle (test 제외)
        run: ./gradlew clean build -x test

      - name: 🔐 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa_temp
          cat ~/.ssh/id_rsa_temp | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        shell: bash

      - name: 🚀 Deploy to EC2 and restart app
        run: |
          echo "📦 빌드된 JAR 파일을 찾습니다..."
          JAR_NAME=$(find build/libs -name "*.jar" ! -name "*plain.jar" | head -n 1)
          echo "📦 업로드 대상: $JAR_NAME"

          echo "📤 EC2에 JAR 업로드 중..."
          scp "$JAR_NAME" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/app.jar

          echo "🔁 EC2 애플리케이션 재시작 중..."
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
          pkill -f 'java -jar' || true
        
          echo "🔐 환경변수 설정 및 앱 실행..."
          nohup env \
          JWT_SECRET="${{ secrets.JWT_SECRET }}" \
          KAKAO_SECRET_KEY="${{ secrets.KAKAO_SECRET_KEY }}" \
          DATABASE_USERNAME="${{ secrets.DATABASE_USERNAME }}" \
          DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}" \
          DRIVER_CLASS_NAME="${{ secrets.DRIVER_CLASS_NAME }}" \
          URL="${{ secrets.URL }}" \
          CLIENT_HOST="${{ secrets.CLIENT_HOST }}" \
          AWS_ACCESS_KEY="${{ secrets.AWS_ACCESS_KEY }}" \
          AWS_SECRET_KEY="${{ secrets.AWS_SECRET_KEY }}" \
          java -jar /home/ubuntu/app.jar \
          --server.port=8080 --server.address=0.0.0.0 > log.txt 2>&1 &
        
          echo "⏳ 서버 시작 대기 중..."
          sleep 10
        
          echo "📄 로그 확인 시도..."
          if [ -f log.txt ]; then
          tail -n 20 log.txt || echo "❌ 로그 파일 tail 실패"
          else
          echo "❌ log.txt 파일 없음 (앱 실행 실패 가능성)"
          fi
          EOF


        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          KAKAO_SECRET_KEY: ${{ secrets.KAKAO_SECRET_KEY }}
          DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DRIVER_CLASS_NAME: ${{ secrets.DRIVER_CLASS_NAME }}
          URL: ${{ secrets.URL }}
          CLIENT_HOST: ${{ secrets.CLIENT_HOST }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}


